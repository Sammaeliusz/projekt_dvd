[main]
dbname = "dvdrent2"
tables = 4
tables_names = ['movie', 'rents', 'tag', 'user', 'movietag', 'usertag']
priority = 10

[user]
columns = 4
columns_names = ['username', 'mail', 'password', 'penalty']
columns_dt = ['tinytext', 'tinytext', 'varchar64', 'int']

[movie]
columns = 6
columns_names = ['title', 'age', 'director', 'production', 'stock', 'description']
columns_dt = ['tinytext', 'tinyint', 'tinytext', 'smallint', 'mediumint', 'text']

[rents]
columns = 5
columns_names = ['movie', 'user', 'rent', 'return', 'real_return']
columns_dt = ['int', 'int', 'date', 'date', 'date']

[tag]
columns = 2
columns_names = ['name', 'description']
columns_dt = ['tinytext', 'text']

[movietag]
references = ['movie', 'tag']
columns = 2
columns_names = ['movie', 'tag']
columns_dt = ['int', 'int']

[usertag]
references = ['user', 'tag']
columns = 2
columns_names = ['user', 'tag']
columns_dt = ['int', 'int']

# user connected features ------------------------------------------------------------------------------------------------------------------------------------

[check_mail]
give = ['username', 'mail', 'password', 'penalty']
take = ['tinytext']
question = 'SELECT * FROM `user` WHERE mail LIKE "{mail}"'
where = 'WHERE mail LIKE {mail}'

[check_password]
give = ['username', 'mail', 'password', 'penalty']
take = ['varchar64']
question = 'SELECT * FROM `user` WHERE password LIKE "{password}"'
where = 'WHERE password LIKE {password}'

[find_user]
give = ['username', 'mail', 'password', 'penalty']
take = ['int']
question = 'SELECT * FROM `user` WHERE id = {user_id}'
where = 'WHERE id = {user_id}'

[get_all_users]
give = ['username', 'mail', 'password', 'penalty']
take = []
question = 'SELECT * FROM `user`'

[create_new_user]
give = []
take = ['tinytext', 'tinytext', 'varchar64']
question = 'INSERT INTO `user`(username, mail, password, penalty) VALUES("{username}","{mail}","{password}", 0)'

[login_user]
give = ['int']
take = ['tinytext', 'varchar64']
question = 'SELECT id FROM `user` WHERE mail = "{mail}" AND password = "{password}"'

[last_user_created]
give = ['int']
take = []
question = 'SELECT LAST_INSERT_ID() FROM `user`'

[update_user]
give = []
take = ['int', 'tinytext', 'tinytext', 'varchar64']
question = 'UPDATE `user` SET username = "{username}", mail = "{mail}", password = "{password}" WHERE user.id = {user_id}'

[delete_user]
give = []
take = ['int']
question = 'DELETE FROM `user` WHERE user.id = {user_id}'

[get_penalty]
give = ['penalty']
take = ['int']
question = 'SELECT penalty FROM `user` WHERE user.id = {user_id}'

[update_penalty]
give = []
take = ['int','int']
question = 'UPDATE `user` SET penalty = {penalty} WHERE user.id = {user_id}'

# movie connected features ------------------------------------------------------------------------------------------------------------------------------------

[find_movie]
give = ['title', 'age', 'director', 'production', 'stock', 'description']
take = ['int']
question = 'SELECT * FROM `movie` WHERE id = {movie_id}'
where = 'WHERE id = {movie_id}'

[find_last_movie]
give = ['title', 'age', 'director', 'production', 'stock', 'description']
take = ['int']
question = 'SELECT * FROM `movie` ORDER BY id DESC LIMIT {amount}'

[get_all_movies]
give = ['title', 'age', 'director', 'production', 'stock', 'description']
take = []
question = 'SELECT * FROM `movie`'

[create_new_movie]
give = []
take = ['tinytext', 'tinyint', 'tinytext', 'smallint', 'mediumint', 'text']
question = 'INSERT INTO `movie`(title, age, director, production, stock, description) VALUES("{title}",{age},"{director}",{production},{stock},"{description}")'

[last_movie_created]
give = ['int']
take = []
question = 'SELECT LAST_INSERT_ID() FROM `movie`'

[update_movie]
give = []
take = ['int', 'tinytext', 'tinyint', 'tinytext', 'smallint', 'mediumint', 'text']
question = 'UPDATE `movie` SET title = "{title}", age = {age}, director = "{director}", production = {production}, stock = {stock}, description = "{description}" WHERE movie.id = {movie_id}'

[delete_movie]
give = []
take = ['int']
question = 'DELETE FROM `movie` WHERE movie.id = {movie_id}'

# tag connected features ------------------------------------------------------------------------------------------------------------------------------------

[get_user_tags]
give = ['name', 'description']
take = ['int']
question = 'SELECT tag FROM `tag` INNER JOIN `usertag` ON tag.id = usertag.tag INNER JOIN `user` ON usertag.user = user.id WHERE user.id = {user_id}'

[get_all_user_tags]
give = ['name', 'description']
take = []
question = 'SELECT tag.id, tag.name, tag.description FROM `tag` INNER JOIN `usertag` ON tag.id = usertag.tag INNER JOIN `user` ON usertag.user = user.id'

[get_movie_tags]
give = ['name', 'description']
take = ['int']
question = 'SELECT tag FROM `tag` INNER JOIN `movietag` ON tag.id = movietag.tag INNER JOIN `movie` ON movietag.movie = movie.id WHERE movie.id = {movie_id}'

[get_all_movie_tags]
give = ['name', 'description']
take = []
question = 'SELECT tag.id, tag.name, tag.description FROM `tag` INNER JOIN `movietag` ON tag.id = movietag.tag INNER JOIN `movie` ON movietag.movie = movie.id'

[get_all_tags]
give = ['name', 'description']
take = []
question = 'SELECT * FROM `tag`'

[set_user_tag]
give = []
take = ['int', 'int']
question = 'INSERT INTO `usertag` VALUES({user_id},{tag_id})'

[delete_user_tag]
give = []
take = ['int','int']
question = 'DELETE FROM `usertag` WHERE usertag.user = {user_id} AND usertag.tag = {tag_id}'

[set_movie_tag]
give = []
take = ['int', 'int']
question = 'INSERT INTO `movietag` VALUES({movie_id},{tag_id})'

[delete_movie_tag]
give = []
take = ['int','int']
question = 'DELETE FROM `movietag` WHERE movietag.movie = {movie_id} AND movietag.tag = {tag_id}'

[create_new_tag]
give = []
take = ['tinytext', 'text']
question = 'INSERT INTO `tag`(name, description) VALUES("{name}", "{description}")'

[delete_tag]
give = []
take = ['int']
question = 'DELETE FROM `tag` WHERE tag.id = {tag_id}'

[update_tag]
give = []
take = ['int', 'tinytext', 'text']
question = 'UPDATE `tag` SET name = {name}, description = {description} WHERE tag.id = {tag_id}'

# rents connected features
#['movie', 'user', 'rent', 'return', 'real_return']
#['int', 'int', 'date', 'date', 'date']

[get_all_user_rents]
give = ['movie', 'user', 'rent', 'return', 'real_return']
take = ['int']
question = 'SELECT * FROM `rents` WHERE user = {user_id}'

[get_all_user_rented_returned]
give = ['movie', 'user', 'rent', 'return', 'real_return']
take = ['int']
question = 'SELECT * FROM `rents` WHERE user = {user_id} AND real_return IS NOT NULL'

[get_all_user_rented_not_returned]
give = ['movie', 'user', 'rent', 'return', 'real_return']
take = ['int']
question = 'SELECT * FROM `rents` WHERE user = {user_id} AND real_return IS NULL'

[get_all_user_outdated]
give = ['movie', 'user', 'rent', 'return', 'real_return']
take = ['int', 'text']
question = 'SELECT * FROM `rents` WHERE user = {user_id} AND rents.return < "{date}" AND real_return IS NULL'

[get_all_movie_rents]
give = ['movie', 'user', 'rent', 'return', 'real_return']
take = ['int']
question = 'SELECT * FROM `rents` WHERE movie = {movie_id}'

[get_all_outdated]
give = ['movie', 'user', 'rent', 'return', 'real_return']
take = ['text']
question = 'SELECT * FROM `rents` WHERE rents.return < "{date}" AND real_return IS NULL'

[get_all_not_returned]
give = ['movie', 'user', 'rent', 'return', 'real_return']
take = []
question = 'SELECT * FROM `rents` WHERE real_return IS NULL'

[get_user_movie_rent]
give = ['movie', 'user', 'rent', 'return', 'real_return']
take = ['int', 'int']
question = 'SELECT * FROM `rents` WHERE user = {user_id} AND movie = {movie_id}'

[update_rent]
give = []
take = ['int', 'int', 'int', 'date', 'date', 'date']
question = 'UPDATE `rents` SET movie = {movie_id}, user = {user_id}, rent = "{rent}", rents.return = "{return_date}", real_return = "{real_return}" WHERE rents.id = {rent_id}'

[return_rent]
give = []
take = ['int', 'date']
question = 'UPDATE `rents` SET real_return = "{real_return}" WHERE rents.id = {rent_id}'

[create_new_rent]
give = []
take = ['int', 'int', 'date', 'date']
question = 'INSERT INTO `rents`(movie, user, rent, rents.return) VALUES({movie_id}, {user_id}, "{rent}", "{return_date}")'

[delete_rent]
give = []
take = ['int']
question = 'DELETE FROM `rents` WHERE rents.id = {rent_id}'

[get_all_before]
give = ['movie', 'user', 'rent', 'return', 'real_return']
take = ['text']
question = 'SELECT * FROM `rents` WHERE rent < "{date}"'

[get_all_after]
give = ['movie', 'user', 'rent', 'return', 'real_return']
take = ['text']
question = 'SELECT * FROM `rents` WHERE rent > "{date}"'

# to be checked ------------------------------------------------------------------------------------------------------------------------------------

[check_userdata]
take = ['tinytext', 'tinytext']
question = 'SELECT {type} FROM `user` u WHERE u.{type} LIKE "{value}"'

[check_activity]
question = 'SELECT u.username, t.id FROM `user` u INNER JOIN `usertag` ut ON u.id = ut.user INNER JOIN `tag` t ON ut.tag = t.id WHERE t.id = 1'

[user_ban]
question = 'INSERT INTO `usertag`(`user`,`tag`) VALUES({user},1)'

[user_unban]
question = 'DELETE FROM `usertag` WHERE user = {user} AND tag = 1'

[user_create]
question = 'INSERT INTO `user` VALUES (NULL, "{protection(username)}", "{protection(mail)}", "{protection(password)}", 0)'

[user_last]
question = 'SELECT id FROM `user` ORDER BY id DESC LIMIT 1'
[the_best]
give= ['int', 'int']
take=['tinyint']
question = 'SELECT movie, count(*) as c FROM `rents` GROUP BY movie ORDER BY `c` DESC LIMIT {lim}'

